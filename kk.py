
import random

def biased_rolls(prob_list, s, n):

	""" 
Simulate n rolls of a biased m- sided die and return a list containing the results .
Arguments :
prob_list : a list of the probabilities of rolling the
	number on each side of the m- sided die . The list
	will always have the length m (m >= 2) , where m is
	the number of sides numbered 1 to m. Therefore ,
	for example , the probability stored at index 0 in
	the list is the probability of rolling a 1 on
	the m- sided die.
			
	s: the seed to use when initializing the PRNG
				
	n: the number of rolls to return
Return :
	rolls : a list (of length n) containing each of the n rolls of the
	biased die , in the order they were generated .
"""
	
  # the seed value
	random.seed(s)

	m = len(prob_list)		# the length of the prob_list and also the number of sides
	Sum = 0
	Sumlist = []
	rolls = []

	for i in range(n):
		random_element = random.random()  	# random float value between 0 and 1 
		a = 0

		for j in range(m):
			Sum = Sum + prob_list[j]
			Sumlist.append(Sum)				# list for sum of probabilities and it keep added by j which is called cumulative sum.

		for k in range(m):	
			if random_element < Sumlist[k]:		# finding the number the dice has rolled
				rolls.append(k + 1)
				break

	return rolls


def draw_histogram(m, rolls, width):

	"""
	Draws a frequency histogram of the rolls of an m- sided die
	mapped to a fixed width.
Arguments : 
	m (int): the number of sides on the die
	rolls ( list ): the list of rolls generated by the biased die
width(int): 
	the fixed width of the histogram , in characters
	( this is the length of the longest bar in the
	histogram , to maximize space in the chart )
Returns :
	None (but prints the histogram to standard output )
"""

	Countroll = []

	# finding the numbers inside the m number of rolls
	for i in range(m):
		Count = rolls.count(i+1) 	# add 1 for i because of the index
		Countroll.append(Count)

	# use str(m) to change histogram name automatically as input changes
	print("Frequency Histogram: " + str(m) + "-sided Die")
	
	# max number of rolls
	maxcount = max(Countroll)


	# Hash gets the value of count of it and Dash showing the rest.
	for i in range(m):
		Hash = round((Countroll[i]) * width / maxcount)
		Dash = width - Hash

		print(str(i+1) + ". " + Hash* "#" + Dash* "-")




if __name__ == "__main__":
        rolls = biased_rolls([1/12, 1/4 , 1/3, 1/12, 1/12, 1/6], (2**32)-1, 20)
        print(rolls)
        draw_histogram(6, rolls, 50)
